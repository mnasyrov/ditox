// @flow strict

import type {Container, Token} from './ditox';

type ValuesTuple =
  | [*]
  | [*, *]
  | [*, *, *]
  | [*, *, *, *]
  | [*, *, *, *, *]
  | [*, *, *, *, *, *]
  | [*, *, *, *, *, *, *];

type mapPropToToken = <K, V>(key: K, value: V) => Token<V>;
type ValueProps = {[key: string]: *};
type TokenProps<Values: ValueProps> = $ObjMapi<Values, mapPropToToken>;

/**
 * Rebinds the array by the token with added new value.
 * @param container - Dependency container.
 * @param token - Token for an array of values.
 * @param value - New value which is added to the end of the array.
 */
declare export function bindMultiValue<T>(
  container: Container,
  token: Token<Array<T>>,
  value: T,
): void;

/**
 * Returns an array of resolved values by the specified token.
 * If a token is not found, then `undefined` value is used.
 */
declare export function getValues<
  Values: ValuesTuple,
  Tokens: $TupleMap<Values, <V>() => Token<V>>,
>(
  container: Container,
  ...tokens: Tokens
): Values;

/**
 * Returns an array of resolved values by the specified token.
 * If a token is not found, then `ResolverError` is thrown.
 */
declare export function resolveValues<
  Values: ValuesTuple,
  Tokens: $TupleMap<Values, <V>() => Token<V>>,
>(
  container: Container,
  ...tokens: Tokens
): Values;

/**
 * Decorates a factory by passing resolved tokens as factory arguments.
 * @param factory - A factory.
 * @param tokens - Tokens which correspond to factory arguments.
 * @return Decorated factory which takes a dependency container as a single argument.
 */
declare export function injectable<
  Values: ValuesTuple,
  Tokens: $TupleMap<Values, <V>() => Token<V>>,
  Result,
>(
  factory: (...params: Values) => Result,
  ...tokens: Tokens
): (container: Container) => Result;

/**
 * Returns an object with resolved properties which are specified by token properties.
 * If a token is not found, then `undefined` value is used.
 *
 * @example
 * ```ts
 * const props = getProps(container, {a: tokenA, b: tokenB});
 * console.log(props); // {a: 1, b: 2}
 * ```
 */
declare export function getProps<Props: ValueProps>(
  container: Container,
  tokens: TokenProps<Props>,
): $Shape<Props>;

/**
 * Returns an object with resolved properties which are specified by token properties.
 * If a token is not found, then `ResolverError` is thrown.
 *
 * @example
 * ```ts
 * const props = resolveProps(container, {a: tokenA, b: tokenB});
 * console.log(props); // {a: 1, b: 2}
 * ```
 */
declare export function resolveProps<Props: ValueProps>(
  container: Container,
  tokens: TokenProps<Props>,
): Props;

/**
 * Decorates a factory by passing a resolved object with tokens as the first argument.
 * @param factory - A factory.
 * @param tokens - Object with tokens.
 * @return Decorated factory which takes a dependency container as a single argument.
 *
 * @example
 * ```ts
 * const factory = ({a, b}: {a: number, b: number}) => a + b;
 * const decoratedFactory = injectableProps(factory, {a: tokenA, b: tokenB});
 * const result = decoratedFactory(container);
 * ```
 */
declare export function injectableProps<Props: ValueProps, Result>(
  factory: (props: Props) => Result,
  tokens: TokenProps<Props>,
): (container: Container) => Result;
